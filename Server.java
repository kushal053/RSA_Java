
import java.awt.image.BufferedImage;
import java.io.*;
import java.math.BigInteger;
import java.net.*;
import java.util.Random;
import java.util.Scanner;

import javax.imageio.ImageIO;

public class Server {

	static BigInteger nD, dD, messD, dMes;

	static BigInteger p, q, n, e, d, T, mess;

	static int len = 1024;

	static byte[] RSA_en(byte[] message) {// RSA key generation and encryption

		p = new BigInteger(
				"107733513453331563574789085716683815515971733128654334273229625714894091256337692087868476745796141341248368830230192746966718529693412871883374699342780359419145203729791105702906377737938959559771988306930654387238539486919306064949102202028635553525390069707714552625155038693906760928420565875839272777193");
		q = new BigInteger(
				"145714871640258513890276544931727709892488730314760390149789407721169735898841885258983618246527891260654602762003586783845661513023409190490651554406230568031680817812976111924056735470976869509585104675206776023833727221077395243394409189136464375272532829664682210191039726723342449946704675450320929995603");

		n = p.multiply(q);

		T = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

		e = new BigInteger(
				"7336211137545971933055076495137855972259778411939032930374447397638479716184694117930807455960881914378269700735401140465076000243414026031567427884467229");// generating
																																												// e
		d = new BigInteger(
				"10947630643248412877527175561631516896716894553122362990727308159309994938229059427445329056929368194264331052629192817976831059979897741872277692133686800773123588840798707985185612187710137865561233765193840953902957542526046975788951741779253501391088044477470155211473445019557354695063409702855970584267325154328598600980154228786248360940643335494085841484579664291479686165720862275967456996949045652421208536851550131446362586569903640617310573183333826151102399401734006532453315569857835065310730756178180352408219543627008200187326744358605201248395805687128690860732528236448784163151293003366806918946853");// generating
																																																																																																																																																																// d

		mess = (new BigInteger(message)).modPow(e, n);

		return mess.toByteArray();

	}

	static byte[] RSA_Dcr(byte[] message) {

		dD = new BigInteger(
				"9462315982437999676403150276233289566285412491149156330291945325321994648049854700682028374070316352802008057206859639364753139853403176847625432782075043762318993912718907973789765880776650277543856943950210003141269137603788926336621917102083247674286299016352874508831619857837464995712381859464890086991537701035245914897155884718202612767881660468768333071291704623682442807836000918101565915140440941570271865287694658071965437044610452463410255088721203825880831788795048837028648163176585466592203876730704279403269159186078332899821107136402685418442931405798449181877544017229486314571215169842311590868345");
		nD = new BigInteger(
				"14981135106073469994915610166811131994898621358009427197398147106167525125980854379305122147031563672687674735043843063842902472606788758254460265249097464270595706761147676700613558912864076541752007254849534665055619532742167830083431816533735224260675316387744022062114975825514582274066874755590779489729409893130689462395986977535825626881500375079102090434155298091594788899195590069126559510311763001214038480295780093523488780146785561554130107154982739553902246602649075601731142977099641883464187290225840355168482734616144713564260606925527417231735222909071012780106586925748908622392655252897164076682757");
		messD = new BigInteger(message);

		dMes = messD.modPow(dD, nD);// Decrypting

		return dMes.toByteArray();

	}

	public static void main(String[] args) {

		System.out.println("Starting the server...");
		try {
			DatagramSocket serverSocket = new DatagramSocket(1556);
			byte[] receiveData = new byte[256];
			byte[] sendMsg;

			while (true) {
				DatagramPacket receivePacket;

				receivePacket = new DatagramPacket(receiveData, receiveData.length);

				System.out.println("Server is ready to accept data...");

				serverSocket.receive(receivePacket);

				System.out.println("Packet received...");

				System.out.println("Client :- " + new String(RSA_Dcr(receivePacket.getData())));

				InetAddress IpAddress = receivePacket.getAddress();// destination
																	// IP
																	// address
				int port = receivePacket.getPort();// destination port
													// no(client)

				Scanner inOption = new Scanner(System.in);//
				System.out.println("Please enter the data");

				String readData = inOption.nextLine();// reading the user data.
				byte sendData[] = new byte[256];

				sendData = RSA_en(readData.getBytes());// Encrypting the
				System.out.println("Encrypted Data : " +new String(sendData));										// Datagram Packet
														// before sending

				DatagramPacket sendPacket;
				sendPacket = new DatagramPacket(sendData, sendData.length, IpAddress, port);
				serverSocket.send(sendPacket);

			}
		} catch (IOException e) {
			System.out.println(e);
		}
	}
}
