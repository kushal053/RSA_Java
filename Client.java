
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.*;
import java.util.Random;
import java.util.Scanner;
import java.math.*;

import javax.imageio.ImageIO;

public class Client {

	static BigInteger p, q, n, e, d, T, mess;// Variables for encryption

	static BigInteger nD, dD, messD, dMes;// variables for Decryption
	static int len = 1024;

	static byte[] RSA_en(byte[] message) {// RSA key generation and encryption
		p = new BigInteger(
				"100705698706356725832125633981178447511189012933008827908293580288203821613762683649128380987118478543956539245719638363498235397325144922957313946018345186727357707305243981690111616080878491709874480936963558022422755845372785136419991349503291371918995470229638562574414161271980424570270503802420834382693");
		q = new BigInteger(
				"148761542777795489870456904297046318838014566695238863866209454294363228732136511022486837628695342792543494915794684471075337980258433072246830472454903188010700906506481780979984750930468309586498376756490990040872232889964099304729290529700818862852186287832596860782455844816083252904435790579489409455649");

		n = p.multiply(q);

		T = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

		e = new BigInteger(
				"12652604729380209029747565797335916011689725878865771937862336854685648337926826365446638178344722550931417527336888606604951614951006272476369610354067401");
		d = new BigInteger(
				"9462315982437999676403150276233289566285412491149156330291945325321994648049854700682028374070316352802008057206859639364753139853403176847625432782075043762318993912718907973789765880776650277543856943950210003141269137603788926336621917102083247674286299016352874508831619857837464995712381859464890086991537701035245914897155884718202612767881660468768333071291704623682442807836000918101565915140440941570271865287694658071965437044610452463410255088721203825880831788795048837028648163176585466592203876730704279403269159186078332899821107136402685418442931405798449181877544017229486314571215169842311590868345");// generating
																																																																																																																																																															// d

		mess = (new BigInteger(message)).modPow(e, n);// Encrypting

		return mess.toByteArray();

	}

	static byte[] RSA_Dcr(byte[] message) {// RSA Decryption

		dD = new BigInteger(
				"10947630643248412877527175561631516896716894553122362990727308159309994938229059427445329056929368194264331052629192817976831059979897741872277692133686800773123588840798707985185612187710137865561233765193840953902957542526046975788951741779253501391088044477470155211473445019557354695063409702855970584267325154328598600980154228786248360940643335494085841484579664291479686165720862275967456996949045652421208536851550131446362586569903640617310573183333826151102399401734006532453315569857835065310730756178180352408219543627008200187326744358605201248395805687128690860732528236448784163151293003366806918946853");
		nD = new BigInteger(
				"15698375084206272526336872398361778509314894087917841907058921347900586694130899882770509370994274214701075646953490135004729905973685295618897165045678470467368903992111708285810291640487245517477153162736668633492527580341329599422520660424429500809589364901309666892741978651724301102249699558256216395736716276284309409662257143671317529319069298955962176790101089860485465497715749826017755719146084342873646614838531939636766454884374839654241013637693702063270664576261958334953008806857150766346521963625419290168285526922143783527300385828875275762279856157373466495980560391229680957787096668169267088682379");
		messD = new BigInteger(message);

		dMes = messD.modPow(dD, nD);// Decrypting

		System.out.println("Decrypted Message " + new String(dMes.toByteArray()));
		return dMes.toByteArray();

	}

	private static final boolean DEBUG = true;

	public static void main(String[] args) {
		if (DEBUG) {
			System.out.println("Starting the client ");
		}
		try {
			while(true){
			byte sendData[] = new byte[256];
			DatagramSocket clientSocket = new DatagramSocket();

			InetAddress IpAddress = InetAddress.getByName("kushal_gowda");

			Scanner inOption = new Scanner(System.in);//
			System.out.println("Please enter the data");

			String readData = inOption.nextLine();// reading the user data.
			System.out.println("File Out " + readData);

			DatagramPacket sendPacket;
			sendData = RSA_en(readData.getBytes());
			System.out.println("Encrypted data :" + new String(sendData));

			sendPacket = new DatagramPacket(sendData, sendData.length, IpAddress, 1556);
			if (DEBUG) {
				System.out.println("Sending data to server...");
			}
			clientSocket.send(sendPacket);
			byte[] receiveData = new byte[256];

			DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
			if (DEBUG) {
				System.out.println("Waiting to receive data from server...");
			}
			clientSocket.receive(receivePacket);// receiving packets

			System.out.println("From server :- " + new String(RSA_Dcr(receivePacket.getData())));
			clientSocket.close();
			}

		} catch (IOException e) {
			System.out.println(e);
		}
	}
}
